<?php

namespace Tests\Feature;

use App\Customer;
use App\User;
use Illuminate\Console\Scheduling\Event;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CustomerTest extends TestCase
{
    use RefreshDatabase;
    /**
     * A basic test example.
     *
     * @return void
     */

    private function actingAsAdmin() {
                $this->actingAs(factory(User::class)->create([
            'email' => 'admin@gmail.com'
        ]));
    }
//    protected function setUp(): void
//    {
//        parent::setUp(); // TODO: Change the autogenerated stub
//        Event::fake();
//    }

    public function testBasicTest()
    {
        $response = $this->get('/');
        $response->assertStatus(200);

        $this->only_logged_user_can_create_customer_list();
        $this->authenticated_user_can_see_customer_list();
        $this->a_customer_can_be_added_through_the_form();
//        $this->a_name_is_required();
//        $this->a_name_is_at_least_three_characters();
        $this->an_email_is_required();
        $this->a_valid_email_is_required();

    }

    public function only_logged_user_can_create_customer_list() {
        $response = $this->get('/customers');
            $response->assertRedirect('/login');

    }
    public function authenticated_user_can_see_customer_list() {
        $this->actingAs(factory(User::class)->create());
        $response = $this->get('/customers')->assertOk();

    }
    public function a_customer_can_be_added_through_the_form() {

//        Event::fake();
//        $this->withExceptionHandling();

//        $this->actingAs(factory(User::class)->create([
//            'email' => 'admin@gmail.com'
//        ]));
        $this->actingAsAdmin();
        $response = $this->post('/customers', $this->data());

        $this->assertCount(1, Customer::all());
    }

    public function a_name_is_required() {

//        $this->actingAs(factory(User::class)->create([
//            'email' => 'admin@gmail.com'
//        ]));
        $this->actingAsAdmin();
        $response = $this->post('/customers', array_merge($this->data(), ['name' => '']));
        $response->assertSessionHasErrors('name');
        $this->assertCount(0, Customer::all());
    }

    public function a_name_is_at_least_three_characters () {

//        $this->actingAs(factory(User::class)->create([
//            'email' => 'admin@gmail.com'
//        ]));
        $this->actingAsAdmin();
        $response = $this->post('/customers', array_merge($this->data(), ['name' => 'a']));
        $response->assertSessionHasErrors('name');
        $this->assertCount(0, Customer::all());
    }

    public function an_email_is_required() {
        $this->actingAsAdmin();
        $response = $this->post('/customers', array_merge($this->data(), ['email' => '']));
        $response->assertSessionHasErrors('email');
        $this->assertCount(0, Customer::all());
    }
    public function a_valid_email_is_required() {
        $this->actingAsAdmin();
        $response = $this->post('/customers', array_merge($this->data(), ['email' => 'testtesttest']));
        $response->assertSessionHasErrors('email');
        $this->assertCount(0, Customer::all());
    }

    private function data() {
        return [
            'name' => 'test',
            'email' => 'test@test.com',
            'active' => '1',
            'company_id' => '1',
        ];
    }
}
